
----STARTUP----{15 January 2014 . 2:16:33 pm} as /home/bot/lang-smalltalk/images/Squeak4.5-12568.image!!Integer methodsFor: 'benchmarks' stamp: 'toma 1/15/2014 14:33' prior: 42646392!benchStm	[(1 to: 1000)		do: [:t1 | SPyVM print: 'Thread 1 reporting!!']] parallelFork.	[(1 to: 1000)		do: [:t1 | SPyVM print: 'Thread 2 reporting!!']] parallelFork.	[(1 to: 1000)		do: [:t1 | SPyVM print: 'Thread 3 reporting!!']] parallelFork.	[(1 to: 1000)		do: [:t1 | SPyVM print: 'Thread 4 reporting!!']] parallelFork.	(1 to: 1000)		do: [:x | SPyVM print: '* spinlock *'].	^ 42 printString! !----SNAPSHOT----{15 January 2014 . 2:33:47 pm} Squeak4.5-12568.image priorSource: 9103122!!Integer methodsFor: 'benchmarks' stamp: 'toma 1/15/2014 14:35' prior: 42656801!benchStm3	| t1 t2 |	t1 := [(1 to: 100)				do: [:t3 | SPyVM print: 'Thread 1 reporting!!']] parallelFork.	t2 := [(1 to: 100)				do: [:t3 | SPyVM print: 'Thread 2 reporting!!']] parallelFork.	SPyVM print: 'Waiting for Task 1'.	t1 wait.	SPyVM print: 'Waiting for Task 2'.	t2 wait.	SPyVM print: 'Finished waiting.'! !----SNAPSHOT----{15 January 2014 . 2:36:01 pm} Squeak4.5-12568.image priorSource: 594!!STMProcess methodsFor: 'as yet unclassified' stamp: 'toma 1/15/2014 14:37' prior: 42653846!wait	<primitive: 789>	SPyVM print: ' Failed to wait for process!! '! !----SNAPSHOT----{15 January 2014 . 2:37:09 pm} Squeak4.5-12568.image priorSource: 1091!----STARTUP----{16 January 2014 . 9:13:20 pm} as /home/bot/lang-smalltalk/images/Squeak4.5-12568.image!!BlockClosure methodsFor: 'scheduling' stamp: 'toma 1/16/2014 21:13' prior: 42654183!parallelFork	^ (self newSTMProcess) fork; yourself! !----SNAPSHOT----{16 January 2014 . 9:14:01 pm} Squeak4.5-12568.image priorSource: 1345!!STMProcess methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 21:14'!primWait	<primitive: 789>	SPyVM print: ' Failed to wait for process!! '! !!STMProcess methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 21:15' prior: 33555705!wait		SPyVM print: '[squeak] wait'	self primWait! !!STMProcess methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 21:15' prior: 33556450!wait		SPyVM print: '[squeak] wait'.	self primWait! !----SNAPSHOT----{16 January 2014 . 9:15:29 pm} Squeak4.5-12568.image priorSource: 1681!!BasicClassOrganizer methodsFor: 'accessing' stamp: 'toma 1/16/2014 22:18' prior: 17298983!classComment	classComment		ifNil: [^ ''].	^ [classComment text ifNil: ['']] on: Error do: [^ ''].! !Object subclass: #SPySTM	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SPy-Benchmarks'!Object subclass: #SPySTM	instanceVariableNames: ''	classVariableNames: 'Shared'	poolDictionaries: ''	category: 'SPy-Benchmarks'!!SPySTM class methodsFor: 'nil' stamp: 'toma 1/16/2014 22:22'!shared		^self Shared! !!SPySTM class methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 22:23' prior: 33557264!shared		^Shared! !!SPySTM class methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 22:23'!shared: aValue		Shared := aValue! !----SNAPSHOT----{16 January 2014 . 10:24:08 pm} Squeak4.5-12568.image priorSource: 2221!Object subclass: #STMAtomic	instanceVariableNames: 'lock'	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-Processes'!!STMAtomic methodsFor: 'nil' stamp: 'toma 1/16/2014 22:28'!primEnter	<primitive: 790>! !!STMAtomic methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 22:28' prior: 33557810!primEnter	<primitive: 790>	SPyVM print: 'primEnter failed'.! !!STMAtomic methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 22:28' prior: 33557933!primEnter	<primitive: 790>		SPyVM print: 'primEnter failed'.! !!STMAtomic methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 22:29'!primLeave	<primitive: 791>		SPyVM print: 'primLeave failed'.! !!STMAtomic methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 22:29'!value		self primEnter.	! !!STMAtomic methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 22:29' prior: 33558376!value		| result |		self primEnter.	! !!STMAtomic methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 22:30' prior: 33558498!value		| result |		self primEnter.	result := self.	self primLeave	! !!STMAtomic methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 22:30' prior: 33558634!value		| result |		self primEnter.	result := self.	self primLeave.	! !Object subclass: #STMAtomic	instanceVariableNames: 'block'	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-Processes'!!STMAtomic methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 22:31' prior: 33558803!value		| result |		self primEnter.	result := self block value.	self primLeave.	! !!STMAtomic methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 22:31' prior: 33559111!value		| result error |		self primEnter.	result := self block value.	self primLeave.	! !!STMAtomic methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 22:32' prior: 33559293!value		| result error |		self primEnter.	[result := self block value.] on: Error do: [:err | error := err]	self primLeave.	! !!STMAtomic methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 22:32' prior: 33559481!value		| result error |		self primEnter.	error := nil.		[result := self block value.] on: Error do: [:err | error := err]	self primLeave.	! !!STMAtomic methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 22:32' prior: 33559707!value		| result error |		self primEnter.	error := nil.	result := nil.	[result := self block value.] on: Error do: [:err | error := err]	self primLeave.	! !!STMAtomic methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 22:32' prior: 33559950!value		| result error |		self primEnter.	error := nil.	result := nil.	[result := self block value.] on: Error do: [:err | error := err].	self primLeave.	! !!STMAtomic methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 22:33' prior: 33560207!value		| result error |		self primEnter.	error := nil.	result := nil.	[result := self block value.] on: Error do: [:err | error := err].	self primLeave.	error ifNotNil: [error raise]	! !!STMAtomic methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 22:33' prior: 33560465!value		| result error |		self primEnter.	error := nil.	result := nil.	[result := self block value.] on: Exception do: [:err | error := err].	self primLeave.	error ifNotNil: [error raise]	! !!STMAtomic methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 22:35' prior: 33560754!value		| result error |		self primEnter.	error := nil.	result := nil.	[result := self block value.] on: Exception do: [:err | error := err].	self primLeave.	error ifNotNil: [error pass]	! !!STMAtomic methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 22:35' prior: 33561047!value		| result error |		self primEnter.	error := nil.	result := nil.	[result := self block value.] on: Exception do: [:err | error := err].	self primLeave.	error ifNotNil: [error pass]		! !!STMAtomic methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 22:35' prior: 33561339!value		| result error |		self primEnter.	error := nil.	result := nil.	[result := self block value.] on: Exception do: [:err | error := err].	self primLeave.	error ifNotNil: [error pass].	^result	! !!STMAtomic class methodsFor: 'nil' stamp: 'toma 1/16/2014 22:36'!from: aBlock		^ (STMAtomic new)		block: aBlock;		yourself.! !!STMAtomic class methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 22:36' prior: 33561909!from: aBlock		^ (STMAtomic new)		block: aBlock;		yourself! !!BlockClosure methodsFor: 'nil' stamp: 'toma 1/16/2014 22:37'!atomic		^STMAtomic from: self! !SystemOrganization addCategory: #'Kernel-STM'!SystemOrganization classify: #STMAtomic under: #'Kernel-STM'!SystemOrganization classify: #STMProcess under: #'Kernel-STM'!!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 22:40'!benchStmAtomic	! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 22:40' prior: 33562476!benchStmAtomic		| sum |	sum := 0.	! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 22:40' prior: 33562577!benchStmAtomic		| sum |	sum := 0.	! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 22:40' prior: 33562700!benchStmAtomic		| sum |	sum := 0.		! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 22:41'!benchStmParallel		| sum |	sum := 0.		! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 22:41' prior: 33562933!benchStmParallel		| sum |	sum := 0.		(1 to: self) do: [ :i |		[(1 to: 100) do: [ :k | sum := sum + k ]]		]! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 22:42' prior: 33563060!benchStmParallel		| sum |	sum := 0.		(1 to: 8) do: [ :i |		[(1 to: 100) do: [ :k | sum := sum + k ]]		]! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 22:42' prior: 33563258!benchStmParallel		| sum |	sum := 0.		(1 to: 8) do: [ :i |		[(i to: (i + 1000)) do: [ :k | sum := sum + k ]]		]! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 22:42' prior: 33563453!benchStmParallel		| sum |	sum := 0.		(1 to: 8) do: [ :i |		[((i * 1000) to: ((i + 1) * 1000)) do: [ :k | sum := sum + k ]]		]! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 22:43' prior: 33563655!benchStmParallel		| sum |	sum := 0.		(1 to: 8) do: [ :i |		[((i * 1000) to: ((i + 1) * 1000)) do: [ :k | sum := sum + k ]] parallelFork		]! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 22:43' prior: 33563872!benchStmParallel		| sum |	sum := 0.		(1 to: 8) do: [ :i |		[((i * 1000) to: ((i + 1) * 1000)) do: [ :k | sum := sum + k. ]] parallelFork.		]! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 22:43' prior: 33564102!benchStmParallel		| sum |	sum := 0.		(0 to: 7) do: [ :i |		[((i * 1000) to: ((i + 1) * 1000)) do: [ :k | sum := sum + k. ]] parallelFork.		]! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 22:43' prior: 33564334!benchStmParallel		| sum |	sum := 0.		(0 to: 7) do: [ :i |		[((i * 1000) to: ((i + 1) * 1000)) do: [ :k | sum := sum + k. ]] parallelFork.		]	! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 22:46' prior: 33564566!benchStmParallel		| sum t |	sum := 0.		(0 to: 7) collect: [ :i | 		 [((i * 1000) to: ((i + 1) * 1000)) do: [ :k | 				sum := sum + k. ]			] parallelFork		]	! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 22:46' prior: 33564800!benchStmParallel		| sum threads |	sum := 0.		threads := (0 to: 7) collect: [ :i | 		 [((i * 1000) to: ((i + 1) * 1000)) do: [ :k | 				sum := sum + k. ]			] parallelFork		]	! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 22:46' prior: 33565051!benchStmParallel		| sum threads |	sum := 0.		threads := (0 to: 7) collect: [ :i | 		 [((i * 1000) to: ((i + 1) * 1000)) do: [ :k | 				sum := sum + k. ]			] parallelFork		].	threads do: [:t | t wait.]! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 22:46' prior: 33565319!benchStmParallel		| sum threads |	sum := 0.		threads := (0 to: 7) collect: [ :i | 		 [((i * 1000) to: ((i + 1) * 1000)) do: [ :k | 				sum := sum + k. ]			] parallelFork		].	threads do: [:t | t wait].	^ sum printString! !----SNAPSHOT----{16 January 2014 . 10:47:04 pm} Squeak4.5-12568.image priorSource: 3090!!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 22:56' prior: 33562824!benchStmAtomic	| sum threads |		sum := 0.		threads := (0 to: 7) collect: [ :i | 		 [((i * 1000) to: ((i + 1) * 1000)) do: [ :k | 				[sum := sum + k. ] atomic value]			] parallelFork		].	threads do: [:t | t wait].	^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 22:57' prior: 33566018!benchStmAtomic	| sum threads |		sum := 0.		threads := (0 to: 7) collect: [ :i | 		 [((i * 1000) to: ((i + 1) * 1000 - 1)) do: [ :k | 				[sum := sum + k. ] atomic value]			] parallelFork		].	threads do: [:t | t wait].	^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 22:57' prior: 33565614!benchStmParallel		| sum threads |	sum := 0.		threads := (0 to: 7) collect: [ :i | 		 [((i * 1000) to: ((i + 1) * 1000 - 1)) do: [ :k | 				sum := sum + k. ]			] parallelFork		].	threads do: [:t | t wait].	^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 22:57' prior: 33566678!benchStmParallel		| sum threads |		sum := 0.		threads := (0 to: 7) collect: [ :i | 		 [((i * 1000) to: ((i + 1) * 1000 - 1)) do: [ :k | 				sum := sum + k. ]			] parallelFork		].	threads do: [:t | t wait].	^ sum printString! !----SNAPSHOT----{16 January 2014 . 10:58:17 pm} Squeak4.5-12568.image priorSource: 11414!!STMAtomic methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 23:01' prior: 33561633!value		| result  |		self primEnter.	result := self block value.	self primLeave.	^result	! !!STMAtomic methodsFor: 'accessing' stamp: 'toma 1/16/2014 23:02'!block	^ block! !!STMAtomic methodsFor: 'accessing' stamp: 'toma 1/16/2014 23:02'!block: anObject	block := anObject! ![ 1 + 1 ] atomic value![ 1 + 1 ] atomic value!----SNAPSHOT----{16 January 2014 . 11:03:21 pm} Squeak4.5-12568.image priorSource: 12802!----SNAPSHOT----{16 January 2014 . 11:03:41 pm} Squeak4.5-12568.image priorSource: 13325!----SNAPSHOT----{16 January 2014 . 11:03:45 pm} Squeak4.5-12568.image priorSource: 13416!BlockClosure organization addCategory: #STM!BlockClosure organization classify: #atomic under: #STM!!BlockClosure methodsFor: 'STM' stamp: 'toma 1/16/2014 22:37' prior: 33562201!atomic		^STMAtomic from: self! !BlockClosure organization classify: #newSTMProcess under: #STM!!BlockClosure methodsFor: 'STM' stamp: '' prior: 42643259!newSTMProcess	^ STMProcess forContext: [self value] asContext priority: Processor activePriority! !!BlockClosure methodsFor: 'STM' stamp: '' prior: 33568373!newSTMProcess	^ STMProcess forContext: [self value] asContext priority: Processor activePriority! !BlockClosure organization classify: #parallelFork under: #STM!!BlockClosure methodsFor: 'STM' stamp: 'toma 1/16/2014 21:13' prior: 33556059!parallelFork	^ (self newSTMProcess) fork; yourself! !Object subclass: #STMFuture	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-STM'!Object subclass: #STMFuture	instanceVariableNames: 'block'	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-STM'!!STMFuture methodsFor: 'accessing' stamp: 'toma 1/16/2014 23:33'!block	^ block! !!STMFuture methodsFor: 'accessing' stamp: 'toma 1/16/2014 23:33'!block: anObject	block := anObject! !!STMFuture methodsFor: 'nil' stamp: 'toma 1/16/2014 23:34'!invoke		! !Object subclass: #STMFuture	instanceVariableNames: 'block process'	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-STM'!!STMFuture methodsFor: 'accessing' stamp: 'toma 1/16/2014 23:34'!process	^ process! !!STMFuture methodsFor: 'accessing' stamp: 'toma 1/16/2014 23:34'!process: anObject	process := anObject! !!STMFuture methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 23:35' prior: 33569341!invoke		self process: (self block parallelFork)! !!STMFuture methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 23:35'!value	! !Object subclass: #STMFuture	instanceVariableNames: 'block process result'	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-STM'!!STMFuture methodsFor: 'accessing' stamp: 'toma 1/16/2014 23:35'!result	^ result! !!STMFuture methodsFor: 'accessing' stamp: 'toma 1/16/2014 23:35'!result: anObject	result := anObject! !!STMFuture methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 23:36' prior: 33569785!invoke		self process: ([self result: self block value] parallelFork)! !!STMFuture methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 23:36' prior: 33569914!value		self process wait.! !!STMFuture methodsFor: 'as yet unclassified' stamp: 'toma 1/16/2014 23:36' prior: 33570525!value		self process wait.	^self result! !!STMFuture class methodsFor: 'nil' stamp: 'toma 1/16/2014 23:37'!invoke: aBlock		^(STMFuture new)		block: aBlock;		invoke;		yourself! !!BlockClosure methodsFor: 'STM' stamp: 'toma 1/16/2014 23:38'!async	^STMFuture invoke: self! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 23:38'!benchStmFuture		! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 23:39' prior: 33570998!benchStmFuture		| futures | 	! !(1 to: 100) sum!!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 23:40' prior: 33571101!benchStmFuture		| futures | 	futures := (0 to: 7) collect: [ :id |		[(1 to: 1000) sum ]		]! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 23:41' prior: 33571236!benchStmFuture		| futures | 	futures := (0 to: 7) collect: [ :id | [(1 to: 1000) sum] async]! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 23:41' prior: 33571416!benchStmFuture		| futures | 	futures := (0 to: 7) collect: [ :id | [(1 to: 1000) sum] async]	! !(1 to: 100) inject: 0 into: [ :i :k | i + k]!!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 23:43' prior: 33571596!benchStmFuture		| sum futures | 	futures := (0 to: 7) collect: [ :id | [(1 to: 1000) sum] async].	sum := futures inject: 0 into: [ :s :f | s + (f value)]	! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 23:44' prior: 33571825!benchStmFuture		| sum futures | 	futures := (0 to: 7) collect: [ :id | [(1 to: 1000) sum] async].	sum := futures inject: 0 into: [ :next :each | next + (each value)]	! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/16/2014 23:44' prior: 33572069!benchStmFuture		| sum futures | 	futures := (0 to: 7) collect: [ :id | [(1 to: 1000) sum] async].	sum := futures inject: 0 into: [ :next :each | next + (each value)].	^ sum printString! !----SNAPSHOT----{16 January 2014 . 11:45:18 pm} Squeak4.5-12568.image priorSource: 13507!----SNAPSHOT----{16 January 2014 . 11:45:23 pm} Squeak4.5-12568.image priorSource: 18085!----SNAPSHOT----{16 January 2014 . 11:46:35 pm} Squeak4.5-12568.image priorSource: 18176!Object subclass: #STMWorker	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-STM'!Object subclass: #STMWorker	instanceVariableNames: 'queue'	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-STM'!!STMFuture methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:23' prior: 33570359!invoke	self process ifNil: [		self process: ([self result: self block value] parallelFork)		] ifNotNil: [		]! !!STMFuture methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:23' prior: 33573142!invoke	self process ifNil: [		self process: ([self result: self block value] parallelFork)	] ifNotNil: [			]! !self!!STMFuture methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:23' prior: 33573350!invoke	self process ifNil: [		self process: ([self result: self block value] parallelFork)	] ifNotNil: [		self error: 'Future already invoked'	]! !!STMFuture methodsFor: 'nil' stamp: 'toma 1/17/2014 00:24'!initialize		super initialize.! !STMFuture removeSelector: #initialize!!STMFuture methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:26' prior: 33570648!value		self process ifNotNil: [		self process wait.		^self result	] ifNil: [		self error: 'Future not invoked'	]	! !!STMFuture methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:26' prior: 33573946!value		self process ifNotNil: [		self wait.		^self result	] ifNil: [		self error: 'Future not invoked'	]	! !!STMFuture methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:26'!wait		self process wait.! !!STMWorker methodsFor: 'nil' stamp: 'toma 1/17/2014 00:28'!submit: aBlock callback: aUnaryBlock		! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:30'!send: aSymbol with: anArgument	! !STMWorker removeSelector: #submit:callback:!!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:30'!on: aSymbol do: aBlock	! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:30' prior: 33574724!on: aSymbol do: aBlock		! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:31'!onMessage: aSymbol do: aBlock		! !STMWorker removeSelector: #on:do:!Object subclass: #STMWorker	instanceVariableNames: 'queue handlers'	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-STM'!!STMWorker methodsFor: 'nil' stamp: 'toma 1/17/2014 00:31'!initialize		! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:31' prior: 33575225!initialize		handlers := Dictionary new.! !!STMWorker methodsFor: 'accessing' stamp: 'toma 1/17/2014 00:32'!queue	^ queue! !!STMWorker methodsFor: 'accessing' stamp: 'toma 1/17/2014 00:32'!queue: anObject	queue := anObject! !!STMWorker methodsFor: 'accessing' stamp: 'toma 1/17/2014 00:32'!handlers	^ handlers! !!STMWorker methodsFor: 'accessing' stamp: 'toma 1/17/2014 00:32'!handlers: anObject	handlers := anObject! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:32' prior: 33575335!initialize		self handlers: Dictionary new.! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:32' prior: 33574951!onMessage: aSymbol do: aBlock		self handlers at: aSymbol put: aBlock! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:32' prior: 33574566!send: aSymbol with: anArgument	! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:32' prior: 33576170!send: aSymbol with: anArgument		! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:34' prior: 33576299!send: aSymbol with: anArgument		! !Object subclass: #STMMessage	instanceVariableNames: 'queue handlers'	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-STM'!Object subclass: #STMMessage	instanceVariableNames: 'name arg'	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-STM'!Object subclass: #STMMessage	instanceVariableNames: 'name args'	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-STM'!{1. 2.}!{1. 2. World.}![:i :j | i + j]![:i :j | i + j] valueWithArguments: {1. 2.}!!STMMessage class methodsFor: 'nil' stamp: 'toma 1/17/2014 00:39'!named: aSymbol withArgs: anArray		^(self new)		name: aSymbol;		arguments: anArray;		yourself! !Object subclass: #STMMessage	instanceVariableNames: 'name arguments'	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-STM'!!STMMessage methodsFor: 'accessing' stamp: 'toma 1/17/2014 00:39'!name: anObject	name := anObject! !!STMMessage methodsFor: 'accessing' stamp: 'toma 1/17/2014 00:39'!arguments	^ arguments! !!STMMessage methodsFor: 'accessing' stamp: 'toma 1/17/2014 00:39'!arguments: anObject	arguments := anObject! !Object subclass: #STMMessage	instanceVariableNames: 'messageName arguments'	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-STM'!!STMMessage methodsFor: 'accessing' stamp: 'toma 1/17/2014 00:40'!messageName	^ messageName! !!STMMessage methodsFor: 'accessing' stamp: 'toma 1/17/2014 00:40'!messageName: anObject	messageName := anObject! !STMMessage removeSelector: #name:!!STMMessage class methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:40' prior: 33577040!named: aSymbol withArgs: anArray		^(self new)		messageName: aSymbol;		arguments: anArray;		yourself! !a := {1. 2. 3.}!a := OrderedCollection new!a add: 5!a!a add: 5!a!!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:44' prior: 33576429!send: aSymbol with: anArgument		self queue! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:44' prior: 33575864!initialize		self handlers: Dictionary new.	self queue: Stack new.! !a := Stack new!a := Stack new!!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:47' prior: 33578512!initialize		self handlers: Dictionary new.	self queue: LinkedList new.! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:48' prior: 33578372!send: aSymbol with: anArgument		self queue addLast: (STMMessage named: aSymbol with: {anArgument})! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:48' prior: 33578879!send: aSymbol with: anArgument		self queue addLast: (STMMessage named: aSymbol withArgs: {anArgument})! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:48' prior: 33579075!send: aSymbol with: anArgument		self queue addLast: (		STMMessage named: aSymbol withArgs: {anArgument})! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:49'!send: aSymbol with: anArgument with: anotherArgument		self queue addLast: (		STMMessage named: aSymbol withArgs: {anArgument. anotherArgument.})! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:49'!send: aSymbol with: anArgument and: anotherArgument		self queue addLast: (		STMMessage named: aSymbol withArgs: {anArgument. anotherArgument.})! !STMWorker removeSelector: #send:with:with:!!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:49'!send: aSymbol with: anArgument and: anotherArgument and: aThirdArgument		self queue addLast: (		STMMessage named: aSymbol withArgs: {anArgument. anotherArgument. aThirdArgument})! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:50'!loop	! !Object subclass: #STMWorker	instanceVariableNames: 'queue handlers active'	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-STM'!!STMWorker methodsFor: 'accessing' stamp: 'toma 1/17/2014 00:50'!active	^ active! !!STMWorker methodsFor: 'accessing' stamp: 'toma 1/17/2014 00:50'!active: anObject	active := anObject! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:50' prior: 33580221!loop		! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:51' prior: 33580665!loop		self active: true.	[self active] whileTrue: [	]! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:51' prior: 33580769!loop		self active: true.	[self active] whileTrue: [			]! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:52' prior: 33580922!loop		self active: true.	[self active] whileTrue: [		[self queue isEmpty] ifFalse: [					]	]! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:52' prior: 33581078!loop		self active: true.	[self active] whileTrue: [		[self queue isEmpty] ifFalse: [			| message | 			[message := self queue removeFirst]		]	]! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:52' prior: 33581273!loop		self active: true.	[self active] whileTrue: [		| message | 		[self queue isEmpty] ifFalse: [						[message := self queue removeFirst]		]	]! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:53' prior: 33581519!loop		self active: true.	[self active] whileTrue: [		| message | 		message := nil.		[self queue isEmpty] ifFalse: [						[message := self queue removeFirst]		]	]! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:53' prior: 33581768!loop		self active: true.	[self active] whileTrue: [		| message | 		message := nil.		[ [self queue isEmpty] ifFalse: [				[message := self queue removeFirst]		] ] atomic value.	]! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:53' prior: 33582035!loop		self active: true.	[self active] whileTrue: [		| message | 		message := nil.		[ [self queue isEmpty] ifFalse: [				[message := self queue removeFirst]		] ] atomic value.			]! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:54'!receive		! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:54' prior: 33582318!loop		self active: true.	[self active] whileTrue: [					]! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:54' prior: 33582587!receive		| message | 		message := nil.		[ [self queue isEmpty] ifFalse: [				[message := self queue removeFirst]		] ] atomic value.! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:54' prior: 33582853!receive		| message | 		message := nil.	[ [self queue isEmpty] ifFalse: [				[message := self queue removeFirst]] 	] atomic value.	^message! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:55' prior: 33575531!queue: aMessage		! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:55' prior: 33583328!queue: aMessage		[self queue addLast: aMessage] atomic value! !!STMWorker methodsFor: 'accessing' stamp: 'toma 1/17/2014 00:56' prior: 33583443!queue: anObject		queue := anObject! !!STMWorker methodsFor: 'accessing' stamp: 'toma 1/17/2014 00:56'!schedule: aMessage	[self queue addLast: aMessage] atomic value! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:58' prior: 33579275!send: aSymbol with: anArgument		self schedule: (		STMMessage named: aSymbol withArgs: {anArgument})! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:58' prior: 33579689!send: aSymbol with: anArgument and: anotherArgument		self schedule: (		STMMessage named: aSymbol withArgs: {anArgument. anotherArgument.})! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:58' prior: 33579960!send: aSymbol with: anArgument and: anotherArgument and: aThirdArgument		self schedule: (		STMMessage named: aSymbol withArgs: {anArgument. anotherArgument. aThirdArgument})! !STMWorker organization classify: #schedule: under: #'as yet unclassified'!!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:56' prior: 33583697!schedule: aMessage	[self queue addLast: aMessage] atomic value! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 01:00' prior: 33582694!loop		self active: true.	[self active] whileTrue: [		self receive ifNotNilDo: [ :m						]			]! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 01:01' prior: 33584800!loop		self active: true.	[self active] whileTrue: [		self receive ifNotNilDo: [ :m |			(self handlers at: (m messageName))				valueWithArguments: (m arguments)			]			]! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 01:01' prior: 33584997!loop		self active: true.	[self active] whileTrue: [		self receive ifNotNilDo: [ :m |			(self handlers at: (m messageName))				valueWithArguments: (m arguments)			]	]! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 01:01'!stop	self active: False! !!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 01:01'!start		[self loop] parallelFork! !w := STMWorker new!w onMessage: #test do: [:i | Transcript show: i]!w start!!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 01:03' prior: 33583086!receive		| message | 		message := nil.	[ (self queue isEmpty) ifFalse: [				[message := self queue removeFirst]] 	] atomic value.	^message! !w stop!!STMWorker methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 01:04' prior: 33585522!stop	self active: false! !Smalltalk renameClassNamed: #STMWorker as: #STMActor!!Integer methodsFor: 'benchmarks' stamp: 'toma 1/17/2014 01:06'!benchStmActor		| a1 a2 |	! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/17/2014 01:06' prior: 33586238!benchStmActor		| a1 a2 |		a1 := STMActor new.	a2 := STMActor new.	! !1 printString!1 printString!1 printString!'1'!!Integer methodsFor: 'benchmarks' stamp: 'toma 1/17/2014 01:14' prior: 33586352!benchStmActor		| a |		a := STMActor new.	a onMessage: #fibonacci do: [ :n :sum1 :sum2 | 		(n < 1) 			ifTrue: [SPyVM print: (sum2 printString) ] 			ifFalse: [a send: #fibonacci with: (n - 1) and: sum2 and: (sum1 + sum2)]		]! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/17/2014 01:14' prior: 33586563!benchStmActor		| a |		a := STMActor new.	a onMessage: #fibonacci do: [ :n :sum1 :sum2 | 		(n < 1) 			ifTrue: [SPyVM print: (sum1 printString) ] 			ifFalse: [a send: #fibonacci with: (n - 1) and: sum2 and: (sum1 + sum2)]		]	! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/17/2014 01:15' prior: 33586879!benchStmActor		| a |		a := STMActor new.	a onMessage: #fibonacci do: [ :n :sum1 :sum2 | 		(n < 1) 			ifTrue: [SPyVM print: (sum1 printString) ] 			ifFalse: [a send: #fibonacci with: (n - 1) and: sum2 and: (sum1 + sum2)]		]	a start.	! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/17/2014 01:18' prior: 33587197!benchStmActor		| a b |		a := STMActor new.	b := STMActor new.	a onMessage: #fibonacci do: [ :n :sum1 :sum2 | 		SPyVM print: 'a'.		(n < 1) 			ifTrue: [SPyVM print: (sum1 printString) ] 			ifFalse: [b send: #fibonacci with: (n - 1) and: sum2 and: (sum1 + sum2)]		].	b onMessage: #fibonacci do: [ :n :sum1 :sum2 | 		SPyVM print: 'b'.		(n < 1) 			ifTrue: [SPyVM print: (sum1 printString) ] 			ifFalse: [a send: #fibonacci with: (n - 1) and: sum2 and: (sum1 + sum2)]		].	a start.	b start.	a send: #fibonacci with: self and: 1 and: 1.! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/17/2014 01:19' prior: 33587525!benchStmActor		| a b |		a := STMActor new.	b := STMActor new.	a onMessage: #fibonacci do: [ :n :sum1 :sum2 | 		SPyVM print: 'a'.		(n < 1) 			ifTrue: [SPyVM print: (sum1 printString) ] 			ifFalse: [b send: #fibonacci with: (n - 1) and: sum2 and: (sum1 + sum2)]		].	b onMessage: #fibonacci do: [ :n :sum1 :sum2 | 		SPyVM print: 'b'.		(n < 1) 			ifTrue: [SPyVM print: (sum1 printString) ] 			ifFalse: [a send: #fibonacci with: (n - 1) and: sum2 and: (sum1 + sum2)]		].	a start.	b start.	a send: #fibonacci with: self and: 1 and: 1.	(1 to: 1000) do: [:i | SPyVM print: '.']! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/17/2014 01:19' prior: 33588158!benchStmActor		| a b |		a := STMActor new.	b := STMActor new.	a onMessage: #fibonacci do: [ :n :sum1 :sum2 | 		SPyVM print: 'a'.		(n < 1) 			ifTrue: [SPyVM print: (sum1 printString) ] 			ifFalse: [b send: #fibonacci with: (n - 1) and: sum2 and: (sum1 + sum2)]		].	b onMessage: #fibonacci do: [ :n :sum1 :sum2 | 		SPyVM print: 'b'.		(n < 1) 			ifTrue: [SPyVM print: (sum1 printString) ] 			ifFalse: [a send: #fibonacci with: (n - 1) and: sum2 and: (sum1 + sum2)]		].	a start.	b start.	a send: #fibonacci with: self and: 1 and: 1.	(1 to: 1000) do: [:i | SPyVM print: '.']	a stop.	b stop.! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/17/2014 01:19' prior: 33588833!benchStmActor		| a b |		a := STMActor new.	b := STMActor new.	a onMessage: #fibonacci do: [ :n :sum1 :sum2 | 		SPyVM print: 'a'.		(n < 1) 			ifTrue: [SPyVM print: (sum1 printString) ] 			ifFalse: [b send: #fibonacci with: (n - 1) and: sum2 and: (sum1 + sum2)]		].	b onMessage: #fibonacci do: [ :n :sum1 :sum2 | 		SPyVM print: 'b'.		(n < 1) 			ifTrue: [SPyVM print: (sum1 printString) ] 			ifFalse: [a send: #fibonacci with: (n - 1) and: sum2 and: (sum1 + sum2)]		].	a start.	b start.	a send: #fibonacci with: self and: 1 and: 1.	(1 to: 1000) do: [:i | SPyVM print: '.'].	a stop.	b stop.! !----SNAPSHOT----{17 January 2014 . 1:19:41 am} Squeak4.5-12568.image priorSource: 18267!----SNAPSHOT----{17 January 2014 . 1:23 am} Squeak4.5-12568.image priorSource: 35706!10 benchStmActor!----QUIT/NOSAVE----{17 January 2014 . 1:24:53 am} Squeak4.5-12568.image priorSource: 35796!----STARTUP----{17 January 2014 . 5:10:50 pm} as /home/bot/lang-smalltalk/images/Squeak4.5-12568.image!!Integer methodsFor: 'benchmarks' stamp: 'toma 1/17/2014 19:00' prior: 33566346!benchStmAtomic	| sum threads |		sum := 0.		threads := (0 to: 7) collect: [ :i | 		 [((i * self) to: ((i + 1) * self - 1)) do: [ :k | 				[sum := sum + k. ] atomic value]			] parallelFork		].	threads do: [:t | t wait].	^ sum printString! !----SNAPSHOT----{17 January 2014 . 7:00:29 pm} Squeak4.5-12568.image priorSource: 35796!!Integer methodsFor: 'benchmarks' stamp: 'toma 1/17/2014 19:01' prior: 33566996!benchStmParallel		| sum threads |		sum := 0.		threads := (0 to: 7) collect: [ :i | 		 [((i * self) to: ((i + 1) * 1000 - 1)) do: [ :k | 				sum := sum + k. ]			] parallelFork		].	threads do: [:t | t wait].	^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/17/2014 19:01' prior: 33591037!benchStmParallel		| sum threads |		sum := 0.		threads := (0 to: 7) collect: [ :i | 		 [((i * self) to: ((i + 1) * self - 1)) do: [ :k | 				sum := sum + k. ]			] parallelFork		].	threads do: [:t | t wait].	^ sum printString! !----SNAPSHOT----{17 January 2014 . 7:01:14 pm} Squeak4.5-12568.image priorSource: 36433!!Integer methodsFor: 'benchmarks' stamp: 'toma 1/17/2014 19:18' prior: 33591357!benchStmParallel		| sum num threads |		sum := 0.		threads := (0 to: 7) collect: [ :i | 		 [((i * self) to: ((i + 1) * self - 1)) do: [ :k | 				sum := sum + k. ]			] parallelFork		].	threads do: [:t | t wait].	^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/17/2014 19:20' prior: 33591767!benchStmParallel		| sum num threads |		num := self \\ 100.	sum := 0.		threads := (0 to: 7) collect: [ :i | 		 [((i * self) to: ((i + 1) * self - 1)) do: [ :k | 				sum := sum + k. ]			] parallelFork		].	threads do: [:t | t wait].	^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/17/2014 19:20' prior: 33592091!benchStmParallel		| sum num threads max |		num := self \\ 100.	sum := 0.		threads := (0 to: 7) collect: [ :i | 		 [((i * self) to: ((i + 1) * self - 1)) do: [ :k | 				sum := sum + k. ]			] parallelFork		].	threads do: [:t | t wait].	^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/17/2014 19:20' prior: 33592436!benchStmParallel		| sum num threads max |		num := self \\ 100.	max := self - num.	sum := 0.		threads := (0 to: 7) collect: [ :i | 		 [((i * self) to: ((i + 1) * self - 1)) do: [ :k | 				sum := sum + k. ]			] parallelFork		].	threads do: [:t | t wait].	^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/17/2014 19:21' prior: 33592785!benchStmParallel		| sum num threads max |		num := self \\ 100.	max := self - num.	sum := 0.		threads := (0 to: num) collect: [ :i | 		 [((i * max) to: ((i + 1) * max - 1)) do: [ :k | 				sum := sum + k. ]			] parallelFork		].	threads do: [:t | t wait].	^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/17/2014 19:21' prior: 33590615!benchStmAtomic	| sum threads max num |		num := self \\ 100.	max := self - num.	sum := 0.		sum := 0.		threads := (0 to: 7) collect: [ :i | 		 [((i * self) to: ((i + 1) * self - 1)) do: [ :k | 				[sum := sum + k. ] atomic value]			] parallelFork		].	threads do: [:t | t wait].	^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/17/2014 19:21' prior: 33593523!benchStmAtomic	| sum threads max num |		num := self \\ 100.	max := self - num.	sum := 0.		sum := 0.		threads := (0 to: num) collect: [ :i | 		 [((i * self) to: ((i + 1) * self - 1)) do: [ :k | 				[sum := sum + k. ] atomic value]			] parallelFork		].	threads do: [:t | t wait].	^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/17/2014 19:21' prior: 33593917!benchStmAtomic	| sum threads max num |		num := self \\ 100.	max := self - num.	sum := 0.		sum := 0.		threads := (0 to: num) collect: [ :i | 		 [((i * max) to: ((i + 1) * max - 1)) do: [ :k | 				[sum := sum + k. ] atomic value]			] parallelFork		].	threads do: [:t | t wait].	^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/17/2014 19:21' prior: 33594313!benchStmAtomic	| sum threads max num |		num := self \\ 100.	max := self - num.	sum := 0.		threads := (0 to: num) collect: [ :i | 		 [((i * max) to: ((i + 1) * max - 1)) do: [ :k | 				[sum := sum + k. ] atomic value]			] parallelFork		].	threads do: [:t | t wait].	^ sum printString! !----SNAPSHOT----{17 January 2014 . 7:21:58 pm} Squeak4.5-12568.image priorSource: 37163!!Integer methodsFor: 'benchmarks' stamp: 'toma 1/17/2014 19:25' prior: 33572325!benchStmFuture		| sum num threads max futures |		num := self \\ 100.	max := self - num.	sum := 0.		futures := (0 to: 7) collect: [ :id | [(1 to: 1000) sum] async].	sum := futures inject: 0 into: [ :next :each | next + (each value)].	^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/17/2014 19:25' prior: 33595178!benchStmFuture		| sum num max futures |		num := self \\ 100.	max := self - num.	sum := 0.		futures := (0 to: 7) collect: [ :id | [(1 to: 1000) sum] async].	sum := futures inject: 0 into: [ :next :each | next + (each value)].	^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/17/2014 19:25' prior: 33595523!benchStmFuture		| sum num max futures |		num := self \\ 100.	max := self - num.	sum := 0.		futures := (0 to: num) collect: [ :id | [(1 to: 1000) sum] async].	sum := futures inject: 0 into: [ :next :each | next + (each value)].	^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/17/2014 19:25' prior: 33595860!benchStmFuture		| sum num max futures |		num := self \\ 100.	max := self - num.	sum := 0.		futures := (0 to: num) collect: [ :id | [(1 to: max) sum] async].	sum := futures inject: 0 into: [ :next :each | next + (each value)].	^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/17/2014 19:26' prior: 33596199!benchStmFuture		| sum num max futures |		num := self \\ 100.	max := (self - num) \\ num.	sum := 0.		futures := (0 to: num) collect: [ :id | [(1 to: max) sum] async].	sum := futures inject: 0 into: [ :next :each | next + (each value)].	^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/17/2014 19:26' prior: 33596537!benchStmFuture		| sum num max futures |		num := self \\ 100.	max := (self - num) // num.	sum := 0.		futures := (0 to: num) collect: [ :id | [(1 to: max) sum] async].	sum := futures inject: 0 into: [ :next :each | next + (each value)].	^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/17/2014 19:26' prior: 33596884!benchStmFuture		| sum num max futures |		num := self \\ 100.	max := self // num.	sum := 0.		futures := (0 to: num) collect: [ :id | [(1 to: max) sum] async].	sum := futures inject: 0 into: [ :next :each | next + (each value)].	^ sum printString! !----SNAPSHOT----{17 January 2014 . 7:26:27 pm} Squeak4.5-12568.image priorSource: 40574!!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 15:20' prior: 33597231!benchStmFuture		| sum num max futures start |		num := self \\ 100.	max := self // num.	sum := 0.			futures := (0 to: num) collect: [ :id | [(1 to: max) sum] async].	sum := futures inject: 0 into: [ :next :each | next + (each value)].	^ sum printString! !Time now!Time now!Time now!Time now!Time now asNanoSeconds!Time now asNanoSeconds!Time now asNanoSeconds!Time now asNanoSeconds!Time now asNanoSeconds!!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 15:25' prior: 33597660!benchStmFuture		| sum num max futures start |		num := self \\ 100.	max := self // num.	sum := 0.		start := Time now asNanoSeconds.		futures := (0 to: num) collect: [ :id | [(1 to: max) sum] async].	sum := futures inject: 0 into: [ :next :each | next + (each value)].		SPyVM print: 'µs'.	SPyVM print: (((Time now asNanoSeconds) - start) // 1000000) printString.		^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 15:25' prior: 33598176!benchStmFuture		| sum num max futures start |		num := self \\ 100.	max := self // num.	sum := 0.		start := Time now asNanoSeconds.		futures := (0 to: num) collect: [ :id | [(1 to: max) sum] async].	sum := futures inject: 0 into: [ :next :each | next + (each value)].		SPyVM print: 'µs inside method:'.	SPyVM print: (((Time now asNanoSeconds) - start) // 1000000) printString.		^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 15:25' prior: 33598657!benchStmFuture		| sum num max futures start |		num := self \\ 100.	max := self // num.	sum := 0.		start := Time now asNanoSeconds.		futures := (0 to: num) collect: [ :id | [(1 to: max) sum] async].	sum := futures inject: 0 into: [ :next :each | next + (each value)].		SPyVM print: '[squeak] µs inside method:'.	SPyVM print: (((Time now asNanoSeconds) - start) // 1000000) printString.		^ sum printString! !Time now asNanoSeconds // 1000000!Time now asNanoSeconds // 1000000!Time now asNanoSeconds // 1000000!Time now asNanoSeconds // 1000000!Time now asNanoSeconds // 1000000!Time now asNanoSeconds // 1000000!Time now asNanoSeconds // 1000000!Time now asNanoSeconds // 1000000!!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 15:26' prior: 33599153!benchStmFuture		| sum num max futures start |		num := self \\ 100.	max := self // num.	sum := 0.		start := Time now asNanoSeconds.		futures := (0 to: num) collect: [ :id | [(1 to: max) sum] async].	sum := futures inject: 0 into: [ :next :each | next + (each value)].		SPyVM print: '[squeak] milliseconds inside method:'.	SPyVM print: (((Time now asNanoSeconds) - start) // 1000000) printString.		^ sum printString! !----SNAPSHOT----{18 January 2014 . 3:26:07 pm} Squeak4.5-12568.image priorSource: 43056!!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 16:30' prior: 33599946!benchStmFuture		| sum num max futures start |		num := self \\ 100.	max := self // num.	sum := 0.	SPyVM print: ('Threads:', (num printString)).	SPyVM print: ('Items/Thread:', (max printString)).		start := Time now asNanoSeconds.		futures := (0 to: num) collect: [ :id | [(1 to: max) sum] async].	sum := futures inject: 0 into: [ :next :each | next + (each value)].		SPyVM print: '[squeak] milliseconds inside method:'.	SPyVM print: (((Time now asNanoSeconds) - start) // 1000000) printString.		^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 16:31' prior: 33600550!benchStmFuture		| sum num max futures start |		num := self \\ 100.	max := self // num.	sum := 0.	SPyVM print: ('Threads:', (num printString)).	SPyVM print: ('Items/Thread:', (max printString)).		start := Time now asNanoSeconds.		futures := (1 to: num) collect: [ :id | [(1 to: max) sum] async].	sum := futures inject: 0 into: [ :next :each | next + (each value)].		SPyVM print: '[squeak] milliseconds inside method:'.	SPyVM print: (((Time now asNanoSeconds) - start) // 1000000) printString.		^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 16:36' prior: 33601163!benchStmFuture		| sum num max futures start |		num := self \\ 100.	max := (self - num) // num.	sum := 0.	SPyVM print: ('Threads:', (num printString)).	SPyVM print: ('Items/Thread:', (max printString)).		start := Time now asNanoSeconds.		futures := (1 to: num) collect: [ :id | [(1 to: max) sum] async].	sum := futures inject: 0 into: [ :next :each | next + (each value)].		SPyVM print: '[squeak] milliseconds inside method:'.	SPyVM print: (((Time now asNanoSeconds) - start) // 1000000) printString.		^ sum printString! !----SNAPSHOT----{18 January 2014 . 4:36:36 pm} Squeak4.5-12568.image priorSource: 45946!----SNAPSHOT----{18 January 2014 . 4:36:48 pm} Squeak4.5-12568.image priorSource: 47883!----STARTUP----{18 January 2014 . 10:05:52 pm} as /home/bot/lang-smalltalk/images/Squeak4.5-12568.image!!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 22:06' prior: 33593154!benchStmParallel		| sum num threads max start |		num := self \\ 100.	max := (self - num) // num.	sum := 0.	SPyVM print: ('Threads:', (num printString)).	SPyVM print: ('Items/Thread:', (max printString)).		start := Time now asNanoSeconds.		threads := (0 to: num) collect: [ :i | 		 [((i * max) to: ((i + 1) * max - 1)) do: [ :k | 				sum := sum + k. ]			] parallelFork		].	threads do: [:t | t wait].	^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 22:06' prior: 33602684!benchStmParallel		| sum num threads max start |		num := self \\ 100.	max := (self - num) // num.	sum := 0.	SPyVM print: ('Threads:', (num printString)).	SPyVM print: ('Items/Thread:', (max printString)).		start := Time now asNanoSeconds.		threads := (1 to: num) collect: [ :i | 		 [((i * max) to: ((i + 1) * max - 1)) do: [ :k | 				sum := sum + k. ]			] parallelFork		].	threads do: [:t | t wait].	^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 22:07' prior: 33603203!benchStmParallel		| sum num threads max start |		num := self \\ 100.	max := (self - num) // num.	sum := 0.	SPyVM print: ('Threads:', (num printString)).	SPyVM print: ('Items/Thread:', (max printString)).		start := Time now asNanoSeconds.		threads := (1 to: num) collect: [ :i | 		 [((i * max) to: ((i + 1) * max - 1)) do: [ :k | 				sum := sum + k. ]			] parallelFork		].	threads do: [:t | t wait].	SPyVM print: '[squeak] milliseconds inside method:'.	SPyVM print: (((Time now asNanoSeconds) - start) // 1000000) printString.	^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 22:07' prior: 33594707!benchStmAtomic		| sum num threads max start |		num := self \\ 100.	max := (self - num) // num.	sum := 0.	SPyVM print: ('Threads:', (num printString)).	SPyVM print: ('Items/Thread:', (max printString)).		start := Time now asNanoSeconds.		threads := (1 to: num) collect: [ :i | 		 [((i * max) to: ((i + 1) * max - 1)) do: [ :k | 				[sum := sum + k.] atomic value. ]			] parallelFork		].	threads do: [:t | t wait].	SPyVM print: '[squeak] milliseconds inside method:'.	SPyVM print: (((Time now asNanoSeconds) - start) // 1000000) printString.	^ sum printString! !----SNAPSHOT----{18 January 2014 . 10:07:37 pm} Squeak4.5-12568.image priorSource: 47973!----SNAPSHOT----{18 January 2014 . 10:48:10 pm} Squeak4.5-12568.image priorSource: 50518!!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 22:59' prior: 33601776!benchStmFuture		| sum num max futures start |		num := self \\ 100.	max := (self - num) // num.	sum := 0.	SPyVM print: ('Threads:', (num printString)).	SPyVM print: ('Items/Thread:', (max printString)).		start := Time now asNanoSeconds.		futures := (1 to: num) collect: [ :id | |s| s := 0.  [(1 to: max) do: [:i | s := s + 1] ] async].	sum := futures inject: 0 into: [ :next :each | next + (each value)].		SPyVM print: '[squeak] milliseconds inside method:'.	SPyVM print: (((Time now asNanoSeconds) - start) // 1000000) printString.		^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 22:59'!benchStmFuture2		| sum num max futures start |		num := self \\ 100.	max := (self - num) // num.	sum := 0.	SPyVM print: ('Threads:', (num printString)).	SPyVM print: ('Items/Thread:', (max printString)).		start := Time now asNanoSeconds.		futures := (1 to: num) collect: [ :id | |s| s := 0.  [(1 to: max) do: [:i | s := s + 1] ] async].	sum := futures inject: 0 into: [ :next :each | next + (each value)].		SPyVM print: '[squeak] milliseconds inside method:'.	SPyVM print: (((Time now asNanoSeconds) - start) // 1000000) printString.		^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 22:59' prior: 33605214!benchStmFuture		| sum num max futures start |		num := self \\ 100.	max := (self - num) // num.	sum := 0.	SPyVM print: ('Threads:', (num printString)).	SPyVM print: ('Items/Thread:', (max printString)).		start := Time now asNanoSeconds.		futures := (1 to: num) collect: [ :id | |s| s := 0.  [(1 to: max) do: [:i | s := s + 1] ] async].	sum := futures inject: 0 into: [ :next :each | next + (each value)].		SPyVM print: '[squeak] milliseconds inside method:'.	SPyVM print: (((Time now asNanoSeconds) - start) // 1000000) printString.		^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 22:59' prior: 33606505!benchStmFuture		| sum num max futures start |		num := self \\ 100.	max := (self - num) // num.	sum := 0.	SPyVM print: ('Threads:', (num printString)).	SPyVM print: ('Items/Thread:', (max printString)).		start := Time now asNanoSeconds.		futures := (1 to: num) collect: [ :id | |s| s := 0.  [(1 to: max) do: [:i | s := s + 1] ] async].	sum := futures inject: 0 into: [ :next :each | next + (each value)].		SPyVM print: '[squeak] milliseconds inside method:'.	SPyVM print: (((Time now asNanoSeconds) - start) // 1000000) printString.		^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 16:36' prior: 33607158!benchStmFuture		| sum num max futures start |		num := self \\ 100.	max := (self - num) // num.	sum := 0.	SPyVM print: ('Threads:', (num printString)).	SPyVM print: ('Items/Thread:', (max printString)).		start := Time now asNanoSeconds.		futures := (1 to: num) collect: [ :id | [(1 to: max) sum] async].	sum := futures inject: 0 into: [ :next :each | next + (each value)].		SPyVM print: '[squeak] milliseconds inside method:'.	SPyVM print: (((Time now asNanoSeconds) - start) // 1000000) printString.		^ sum printString! !----SNAPSHOT----{18 January 2014 . 11:01:12 pm} Squeak4.5-12568.image priorSource: 50609!!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 23:13'!benchStmFuture3		| sum num max futures start |		num := self \\ 100.	max := (self - num) // num.	sum := 0.	SPyVM print: ('Threads:', (num printString)).	SPyVM print: ('Items/Thread:', (max printString)).		start := Time now asNanoSeconds.		futures := (1 to: num) collect: [ :id | [(1 to: max) sum] async].	sum := futures inject: 0 into: [ :next :each | next + (each value)].		SPyVM print: '[squeak] milliseconds inside method:'.	SPyVM print: (((Time now asNanoSeconds) - start) // 1000000) printString.		^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 23:14' prior: 33608507!benchStmFuture3		| sum num max futures start |		num := self \\ 100.	max := (self - num) // num.	sum := 0.	SPyVM print: ('Threads:', (num printString)).	SPyVM print: ('Items/Thread:', (max printString)).		start := Time now asNanoSeconds.		futures := (1 to: num) collect: [ :id | [ (1 to: max) inject: 1 into: [:next :each | (next + each) \\ 1000000 ] ] async].	sum := futures inject: 0 into: [ :next :each | next + (each value)].		SPyVM print: '[squeak] milliseconds inside method:'.	SPyVM print: (((Time now asNanoSeconds) - start) // 1000000) printString.		^ sum printString! !----SNAPSHOT----{18 January 2014 . 11:14:38 pm} Squeak4.5-12568.image priorSource: 53918!!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 23:27' prior: 33609129!benchStmFuture3		| sum num max futures start |		num := self \\ 100.	max := (self - num) // num.	sum := 0.	SPyVM print: ('Threads:', (num printString)).	SPyVM print: ('Items/Thread:', (max printString)).		start := Time now asNanoSeconds.		futures := (1 to: num) collect: [ :id | |s| s:=0. 		[ (id - 1 * max) to: (id * max - 1) max do: [:i | i isPrime ifTrue:[s := s + 1] ]  ]  async].	sum := futures inject: 0 into: [ :next :each | next + (each value)].		SPyVM print: '[squeak] milliseconds inside method:'.	SPyVM print: (((Time now asNanoSeconds) - start) // 1000000) printString.		^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 23:27' prior: 33609898!benchStmFuture3		| sum num max futures start |		num := self \\ 100.	max := (self - num) // num.	sum := 0.	SPyVM print: ('Threads:', (num printString)).	SPyVM print: ('Items/Thread:', (max printString)).		start := Time now asNanoSeconds.		futures := (1 to: num) collect: [ :id | |s| s:=0. 		[ (id - 1 * max) to: (id * max - 1) max do: [:i | i isPrime ifTrue:[s := s + 1] ]  ]  async].	sum := futures inject: 0 into: [ :next :each | next + (each value)].		SPyVM print: '[squeak] milliseconds inside method:'.	SPyVM print: (((Time now asNanoSeconds) - start) // 1000000) printString.		^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 23:27' prior: 33610601!benchStmFuture3		| sum num max futures start |		num := self \\ 100.	max := (self - num) // num.	sum := 0.	SPyVM print: ('Threads:', (num printString)).	SPyVM print: ('Items/Thread:', (max printString)).		start := Time now asNanoSeconds.		futures := (1 to: num) collect: [ :id | |s| s:=0. 		[ (id - 1 * max) to: (id * max - 1) max do: [:i | i isPrime ifTrue:[s := s + 1]]. s yourself.  ]  async].	sum := futures inject: 0 into: [ :next :each | next + (each value)].		SPyVM print: '[squeak] milliseconds inside method:'.	SPyVM print: (((Time now asNanoSeconds) - start) // 1000000) printString.		^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 23:28' prior: 33611305!benchStmFuture3		| sum num max futures start |		num := self \\ 100.	max := (self - num) // num.	sum := 0.	SPyVM print: ('Threads:', (num printString)).	SPyVM print: ('Items/Thread:', (max printString)).		start := Time now asNanoSeconds.		futures := (1 to: num) collect: [ :id | |s| s := 0. 		[ (id - 1 * max) to: (id * max - 1) max do: [:i | i isPrime ifTrue:[s := s + 1]]. s yourself.  ]  async].	sum := futures inject: 0 into: [ :next :each | next + (each value)].		SPyVM print: '[squeak] milliseconds inside method:'.	SPyVM print: (((Time now asNanoSeconds) - start) // 1000000) printString.		^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 23:28' prior: 33612021!benchStmFuture3		| sum num max futures start |		num := self \\ 100.	max := (self - num) // num.	sum := 0.	SPyVM print: ('Threads:', (num printString)).	SPyVM print: ('Items/Thread:', (max printString)).		start := Time now asNanoSeconds.		futures := (1 to: num) collect: [ :id | |s| 		s := 0. 		[ (id - 1 * max) to: (id * max - 1) max do: [:i | i isPrime ifTrue:[s := s + 1]]. s yourself.  ]  async].	sum := futures inject: 0 into: [ :next :each | next + (each value)].		SPyVM print: '[squeak] milliseconds inside method:'.	SPyVM print: (((Time now asNanoSeconds) - start) // 1000000) printString.		^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 23:28' prior: 33612739!benchStmFuture3		| sum num max futures start |		num := self \\ 100.	max := (self - num) // num.	sum := 0.	SPyVM print: ('Threads:', (num printString)).	SPyVM print: ('Items/Thread:', (max printString)).		start := Time now asNanoSeconds.		futures := (1 to: num) collect: [ :id | |s| 		s := 0. 		[ (id - 1 * max) to: (id * max - 1) max do: [:i | i isPrime ifTrue:[s := s + 1]]. s yourself.  ]  async	].	sum := futures inject: 0 into: [ :next :each | next + (each value)].		SPyVM print: '[squeak] milliseconds inside method:'.	SPyVM print: (((Time now asNanoSeconds) - start) // 1000000) printString.		^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 23:28' prior: 33613460!benchStmFuture3		| sum num max futures start |		num := self \\ 100.	max := (self - num) // num.	sum := 0.	SPyVM print: ('Threads:', (num printString)).	SPyVM print: ('Items/Thread:', (max printString)).		start := Time now asNanoSeconds.		futures := (1 to: num) collect: [ :id | |s| 		s := 0. 		[ (id - 1 * max) to: (id * max - 1) max do: [			:i | i isPrime ifTrue:[s := s + 1]]. s yourself.  ]  async	].	sum := futures inject: 0 into: [ :next :each | next + (each value)].		SPyVM print: '[squeak] milliseconds inside method:'.	SPyVM print: (((Time now asNanoSeconds) - start) // 1000000) printString.		^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 23:28' prior: 33614183!benchStmFuture3		| sum num max futures start |		num := self \\ 100.	max := (self - num) // num.	sum := 0.	SPyVM print: ('Threads:', (num printString)).	SPyVM print: ('Items/Thread:', (max printString)).		start := Time now asNanoSeconds.		futures := (1 to: num) collect: [ :id | |s| 		s := 0. 		[ (id - 1 * max) to: (id * max - 1) max do: [			:i | i isPrime ifTrue:[s := s + 1]			]. s yourself.  ]  async	].	sum := futures inject: 0 into: [ :next :each | next + (each value)].		SPyVM print: '[squeak] milliseconds inside method:'.	SPyVM print: (((Time now asNanoSeconds) - start) // 1000000) printString.		^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 23:28' prior: 33614910!benchStmFuture3		| sum num max futures start |		num := self \\ 100.	max := (self - num) // num.	sum := 0.	SPyVM print: ('Threads:', (num printString)).	SPyVM print: ('Items/Thread:', (max printString)).		start := Time now asNanoSeconds.		futures := (1 to: num) collect: [ :id | |s| 		s := 0. 		[ (id - 1 * max) to: (id * max - 1) max do: [			:i | i isPrime ifTrue:[s := s + 1]		]. s yourself.  ]  async	].	sum := futures inject: 0 into: [ :next :each | next + (each value)].		SPyVM print: '[squeak] milliseconds inside method:'.	SPyVM print: (((Time now asNanoSeconds) - start) // 1000000) printString.		^ sum printString! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 23:28' prior: 33615641!benchStmFuture3		| sum num max futures start |		num := self \\ 100.	max := (self - num) // num.	sum := 0.	SPyVM print: ('Threads:', (num printString)).	SPyVM print: ('Items/Thread:', (max printString)).		start := Time now asNanoSeconds.		futures := (1 to: num) collect: [ :id | |s| 		s := 0. 		[ (id - 1 * max) to: (id * max - 1) max do: [			:i | i isPrime ifTrue:[s := s + 1]			]. s yourself.  		]  async	].	sum := futures inject: 0 into: [ :next :each | next + (each value)].		SPyVM print: '[squeak] milliseconds inside method:'.	SPyVM print: (((Time now asNanoSeconds) - start) // 1000000) printString.		^ sum printString! !----SNAPSHOT----{18 January 2014 . 11:28:45 pm} Squeak4.5-12568.image priorSource: 55293!0 isPrime!1 isPrime!2 isPrime!!Integer methodsFor: 'benchmarks' stamp: 'toma 1/18/2014 23:33' prior: 33616371!benchStmFuture3		| sum num max futures start |		num := self \\ 100.	max := (self - num) // num.	sum := 0.	SPyVM print: ('Threads:', (num printString)).	SPyVM print: ('Items/Thread:', (max printString)).		start := Time now asNanoSeconds.		futures := (1 to: num) collect: [ :id | |s| 		s := 0. 		[ (id - 1 * max) to: (id * max - 1) do: [			:i | i isPrime ifTrue:[s := s + 1]			]. s yourself.  		]  async	].	sum := futures inject: 0 into: [ :next :each | next + (each value)].		SPyVM print: '[squeak] milliseconds inside method:'.	SPyVM print: (((Time now asNanoSeconds) - start) // 1000000) printString.		^ sum printString! !----SNAPSHOT----{18 January 2014 . 11:33:23 pm} Squeak4.5-12568.image priorSource: 62591!----STARTUP----{21 January 2014 . 10:50:25 am} as /home/bot/lang-smalltalk/images/Squeak4.5-12568.image!SystemOrganization addCategory: #'VM-GameOfLife'!Object subclass: #GameOfLifeField	instanceVariableNames: 'data height width'	classVariableNames: ''	poolDictionaries: ''	category: 'VM-GameOfLife'!Object subclass: #GameOfLifeField
	instanceVariableNames: 'data height width'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'VM-GameOfLife'!!GameOfLifeField methodsFor: 'as yet unclassified' stamp: 'pre 1/19/2014 21:23'!cellAliveAt: x at: y

	^ (self at: x at: y) = 1! !!GameOfLifeField methodsFor: 'as yet unclassified' stamp: 'pre 1/19/2014 21:14'!rows: numberOfRows columns: numberOfColumns

	self height: numberOfRows.
	self width: numberOfColumns.
	self data: (Matrix rows: numberOfRows columns: numberOfColumns element: 0).
	! !!GameOfLifeField methodsFor: 'accessing' stamp: 'pre 1/19/2014 21:25'!at: x at:y
	
	((x < 1) or: [x > self width]) ifTrue: [ ^ 0 ].
      ((y < 1) or: [y > self height]) ifTrue: [ ^ 0 ].

	^ self data at: y at: x! !!GameOfLifeField methodsFor: 'accessing' stamp: 'pre 1/19/2014 21:25'!at: x at:y put: aValue

	self data at: y at: x put: aValue.! !!GameOfLifeField methodsFor: 'accessing' stamp: 'pre 1/19/2014 22:02'!atRow: rowNumber put: aRow

	self data atRow: rowNumber put: aRow! !!GameOfLifeField methodsFor: 'accessing' stamp: 'pre 1/19/2014 20:45'!data

	^ data! !!GameOfLifeField methodsFor: 'accessing' stamp: 'pre 1/19/2014 20:45'!data: anObject

	data := anObject! !!GameOfLifeField methodsFor: 'accessing' stamp: 'pre 1/19/2014 20:45'!height

	^ height! !!GameOfLifeField methodsFor: 'accessing' stamp: 'pre 1/19/2014 20:45'!height: anObject

	height := anObject! !!GameOfLifeField methodsFor: 'accessing' stamp: 'pre 1/19/2014 21:52'!print

	| resultString |
	resultString := ''.
	(1 to: self height) do: [:y |
		(1 to: self width) do: [ :x |
			resultString := resultString , (self data at: y at: x).].
		resultString := resultString , Character cr ].
	^ resultString			! !!GameOfLifeField methodsFor: 'accessing' stamp: 'pre 1/19/2014 20:45'!rowSlice: sliceSize collect: aBlock

	! !!GameOfLifeField methodsFor: 'accessing' stamp: 'pre 1/19/2014 21:28'!rowwiseFrom: startRow to: endRow collect: aBlock

	| newField |
	newField := GameOfLifeFieldSlice from: startRow to: endRow width: self width.
	(startRow to: endRow) do: [ :y | 
		(1 to: self width) do: [ :x | newField at: x at: y put: (aBlock value: self value: x value: y) ] ].
	^ newField! !!GameOfLifeField methodsFor: 'accessing' stamp: 'pre 1/19/2014 20:45'!width

	^ width! !!GameOfLifeField methodsFor: 'accessing' stamp: 'pre 1/19/2014 20:45'!width: anObject

	width := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GameOfLifeField class
	instanceVariableNames: ''!!GameOfLifeField class methodsFor: 'as yet unclassified' stamp: 'pre 1/19/2014 21:44'!gliderFieldRows: numberOfRows columns: numberOfColumns

	| newField |
	newField := self new rows: numberOfRows columns: numberOfColumns.
	
	newField 
		at: 8 at: 5 put: 1;
		at: 9 at: 5 put: 1;	 
		at: 10 at: 5 put: 1;
		at: 10 at: 4 put: 1;
		at: 9 at: 3 put: 1.
		
	^ newField! !!GameOfLifeField class methodsFor: 'as yet unclassified' stamp: 'pre 1/19/2014 20:43'!rows: numberOfRows columns: numberOfColumns

	^ self new rows: numberOfRows columns: numberOfColumns! !GameOfLifeField subclass: #GameOfLifeFieldSlice	instanceVariableNames: 'startRow endRow'	classVariableNames: ''	poolDictionaries: ''	category: 'VM-GameOfLife'!GameOfLifeField subclass: #GameOfLifeFieldSlice
	instanceVariableNames: 'startRow endRow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'VM-GameOfLife'!!GameOfLifeFieldSlice methodsFor: 'as yet unclassified' stamp: 'pre 1/20/2014 10:22'!from: startRow to: endRow width: width

	self startRow: startRow;
		endRow: endRow;
		width: width;
		height: (endRow - startRow + 1);
		data: (Matrix rows: (endRow - startRow + 1) columns: width).
		
	^ self! !!GameOfLifeFieldSlice methodsFor: 'as yet unclassified' stamp: 'pre 1/19/2014 21:31'!rowwiseDo: aBlock

	self startRow to: self endRow do: [ :rowNumber |
		aBlock value: rowNumber value: (self data atRow: (rowNumber - self startRow) + 1).
	].! !!GameOfLifeFieldSlice methodsFor: 'accessing' stamp: 'pre 1/19/2014 21:30'!at: x at:y put: aValue

	self data at: y +  1 - self startRow at: x put: aValue.! !!GameOfLifeFieldSlice methodsFor: 'accessing' stamp: 'pre 1/19/2014 21:11'!endRow

	^ endRow! !!GameOfLifeFieldSlice methodsFor: 'accessing' stamp: 'pre 1/19/2014 21:11'!endRow: anObject

	endRow := anObject! !!GameOfLifeFieldSlice methodsFor: 'accessing' stamp: 'pre 1/19/2014 21:11'!startRow

	^ startRow! !!GameOfLifeFieldSlice methodsFor: 'accessing' stamp: 'pre 1/19/2014 21:11'!startRow: anObject

	startRow := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GameOfLifeFieldSlice class
	instanceVariableNames: ''!!GameOfLifeFieldSlice class methodsFor: 'as yet unclassified' stamp: 'pre 1/19/2014 20:53'!from: startRow to: endRow width: width

	^ self new from: startRow to: endRow width: width! !Object subclass: #STMSimulation	instanceVariableNames: 'processes field numberOfProcesses fieldSlices fieldNew'	classVariableNames: ''	poolDictionaries: ''	category: 'VM-GameOfLife'!Object subclass: #STMSimulation
	instanceVariableNames: 'processes field numberOfProcesses fieldSlices fieldNew'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'VM-GameOfLife'!!STMSimulation methodsFor: 'as yet unclassified' stamp: 'pre 1/21/2014 09:44'!initialField: aGameOfLifeField

	self field: aGameOfLifeField.
	self fieldNew: (GameOfLifeField rows: (aGameOfLifeField height) columns: (aGameOfLifeField width)).! !!STMSimulation methodsFor: 'as yet unclassified' stamp: 'pre 1/21/2014 09:50'!simulateRound: roundNumber 

	self processes: ((1 to: self numberOfProcesses) collect: [ :processNumber |
		[| rows |
		rows := self startProcess: processNumber.
		rows rowwiseDo: [ :rowNumber :aRow | self fieldNew atRow: rowNumber put: aRow ]] parallelFork. ]).
! !!STMSimulation methodsFor: 'as yet unclassified' stamp: 'pre 1/21/2014 09:44'!simulateRounds: numberOfRounds
	
	| swapField |

	1 to: numberOfRounds do: [ :roundNumber |
		self simulateRound: roundNumber.
		self processes do: [ :semaphore | semaphore wait. ].
		
		"Transcript show: self fieldNew print.
		Transcript show: Character cr."
		
		swapField := self field.
		self field: self fieldNew.
		self fieldNew: swapField.
	].

	^ self field! !!STMSimulation methodsFor: 'as yet unclassified' stamp: 'pre 1/21/2014 09:44'!startProcess: processNumber

	| endOfSlice slice startOfSlice |
	slice := (self field height / self numberOfProcesses).
	startOfSlice := ((processNumber - 1) * slice) + 1.
	endOfSlice := processNumber * slice.

	^ self field rowwiseFrom: startOfSlice
					to: endOfSlice
					collect: [ :tempField :x :y | self thumbUpOrDownAt: x at: y on: tempField ]

	
	! !!STMSimulation methodsFor: 'as yet unclassified' stamp: 'pre 1/21/2014 09:44'!thumbUpOrDownAt: x at: y on: tempField 
	| liveCellCount |
	
	liveCellCount := (tempField at: x - 1 at: y - 1)
				+ (tempField at: x + 0 at: y - 1)
				+ (tempField at: x + 1 at: y - 1)
				+ (tempField at: x - 1 at: y + 0)
				+ (tempField at: x + 1 at: y + 0)
				+ (tempField at: x - 1 at: y + 1)
				+ (tempField at: x + 0 at: y + 1)
				+ (tempField at: x + 1 at: y + 1).
	
	(tempField cellAliveAt: x at: y)
		ifTrue: [((2 = liveCellCount)
					or: [liveCellCount = 3])
				ifTrue: [^ 1]
				ifFalse: [^ 0]]
		ifFalse: [(liveCellCount = 3)
				ifTrue: [^ 1]
				ifFalse: [^ 0]]! !!STMSimulation methodsFor: 'accessing' stamp: 'pre 1/21/2014 09:44'!field

	^ field! !!STMSimulation methodsFor: 'accessing' stamp: 'pre 1/21/2014 09:44'!field: anObject

	field := anObject! !!STMSimulation methodsFor: 'accessing' stamp: 'pre 1/21/2014 09:44'!fieldNew

	^ fieldNew! !!STMSimulation methodsFor: 'accessing' stamp: 'pre 1/21/2014 09:44'!fieldNew: anObject

	fieldNew := anObject! !!STMSimulation methodsFor: 'accessing' stamp: 'pre 1/21/2014 09:44'!fieldSlices

	^ fieldSlices! !!STMSimulation methodsFor: 'accessing' stamp: 'pre 1/21/2014 09:44'!fieldSlices: anObject

	fieldSlices := anObject! !!STMSimulation methodsFor: 'accessing' stamp: 'pre 1/21/2014 09:44'!numberOfProcesses

	^ numberOfProcesses! !!STMSimulation methodsFor: 'accessing' stamp: 'pre 1/21/2014 09:44'!numberOfProcesses: aNumber

	numberOfProcesses := aNumber
	! !!STMSimulation methodsFor: 'accessing' stamp: 'pre 1/21/2014 09:44'!processes

	^ processes! !!STMSimulation methodsFor: 'accessing' stamp: 'pre 1/21/2014 09:44'!processes: anObject

	processes := anObject! !!STMSimulation methodsFor: 'initialize-release' stamp: 'pre 1/21/2014 09:44'!initialize

	self processes: OrderedCollection new.
	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!STMSimulation class
	instanceVariableNames: ''!!STMSimulation class methodsFor: 'as yet unclassified' stamp: 'pre 1/21/2014 09:44'!benchmark

	^ (1 to: 4) collect: [ :i |
			[ self standardSimulation: (2 raisedTo: i) ] timeToRun ]! !!STMSimulation class methodsFor: 'as yet unclassified' stamp: 'pre 1/21/2014 09:44'!benchmark2

	^ (1 to: 5) collect: [ :i |
			[ self standardSimulation2: (2 raisedTo: i) ] timeToRun ]! !!STMSimulation class methodsFor: 'as yet unclassified' stamp: 'pre 1/21/2014 09:44'!standardSimulation2: numberOfProcesses

	^ self new
			numberOfProcesses: numberOfProcesses;
			initialField: (GameOfLifeField gliderFieldRows: 32 columns: 32);
			simulateRounds: 5.
			
			! !!STMSimulation class methodsFor: 'as yet unclassified' stamp: 'pre 1/21/2014 09:44'!standardSimulation: numberOfProcesses

	^ self new
			numberOfProcesses: numberOfProcesses;
			initialField: (GameOfLifeField gliderFieldRows: 32 columns: 32);
			simulateRounds: 5.
			
			! !Object subclass: #Simulation	instanceVariableNames: 'processes field numberOfProcesses fieldSlices fieldNew'	classVariableNames: ''	poolDictionaries: ''	category: 'VM-GameOfLife'!Object subclass: #Simulation
	instanceVariableNames: 'processes field numberOfProcesses fieldSlices fieldNew'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'VM-GameOfLife'!!Simulation methodsFor: 'as yet unclassified' stamp: 'pre 1/20/2014 13:37'!initialField: aGameOfLifeField

	self field: aGameOfLifeField.
	self fieldNew: (GameOfLifeField rows: (aGameOfLifeField height) columns: (aGameOfLifeField width)).! !!Simulation methodsFor: 'as yet unclassified' stamp: 'pre 1/20/2014 13:44'!simulateRound: roundNumber 

	self processes: ((1 to: self numberOfProcesses) collect: [ :processNumber |
		| semaphore |
		semaphore := Semaphore new.
		[| rows |
		rows := self startProcess: processNumber.
		rows rowwiseDo: [ :rowNumber :aRow | self fieldNew atRow: rowNumber put: aRow ].
		semaphore signal] fork.
		semaphore ]).
! !!Simulation methodsFor: 'as yet unclassified' stamp: 'pre 1/20/2014 14:00'!simulateRounds: numberOfRounds
	
	| swapField |

	1 to: numberOfRounds do: [ :roundNumber |
		self simulateRound: roundNumber.
		self processes do: [ :semaphore | semaphore wait. ].
		
		"Transcript show: self fieldNew print.
		Transcript show: Character cr."
		
		swapField := self field.
		self field: self fieldNew.
		self fieldNew: swapField.
	].

	^ self field! !!Simulation methodsFor: 'as yet unclassified' stamp: 'pre 1/20/2014 13:34'!startProcess: processNumber

	| endOfSlice slice startOfSlice |
	slice := (self field height / self numberOfProcesses).
	startOfSlice := ((processNumber - 1) * slice) + 1.
	endOfSlice := processNumber * slice.

	^ self field rowwiseFrom: startOfSlice
					to: endOfSlice
					collect: [ :tempField :x :y | self thumbUpOrDownAt: x at: y on: tempField ]

	
	! !!Simulation methodsFor: 'as yet unclassified' stamp: 'pre 1/20/2014 10:48'!thumbUpOrDownAt: x at: y on: tempField 
	| liveCellCount |
	
	liveCellCount := (tempField at: x - 1 at: y - 1)
				+ (tempField at: x + 0 at: y - 1)
				+ (tempField at: x + 1 at: y - 1)
				+ (tempField at: x - 1 at: y + 0)
				+ (tempField at: x + 1 at: y + 0)
				+ (tempField at: x - 1 at: y + 1)
				+ (tempField at: x + 0 at: y + 1)
				+ (tempField at: x + 1 at: y + 1).
	
	(tempField cellAliveAt: x at: y)
		ifTrue: [((2 = liveCellCount)
					or: [liveCellCount = 3])
				ifTrue: [^ 1]
				ifFalse: [^ 0]]
		ifFalse: [(liveCellCount = 3)
				ifTrue: [^ 1]
				ifFalse: [^ 0]]! !!Simulation methodsFor: 'accessing' stamp: 'pre 1/19/2014 20:04'!field

	^ field! !!Simulation methodsFor: 'accessing' stamp: 'pre 1/19/2014 20:04'!field: anObject

	field := anObject! !!Simulation methodsFor: 'accessing' stamp: 'pre 1/19/2014 22:06'!fieldNew

	^ fieldNew! !!Simulation methodsFor: 'accessing' stamp: 'pre 1/19/2014 22:06'!fieldNew: anObject

	fieldNew := anObject! !!Simulation methodsFor: 'accessing' stamp: 'pre 1/19/2014 20:30'!fieldSlices

	^ fieldSlices! !!Simulation methodsFor: 'accessing' stamp: 'pre 1/19/2014 20:30'!fieldSlices: anObject

	fieldSlices := anObject! !!Simulation methodsFor: 'accessing' stamp: 'pre 1/19/2014 20:09'!numberOfProcesses

	^ numberOfProcesses! !!Simulation methodsFor: 'accessing' stamp: 'pre 1/19/2014 20:09'!numberOfProcesses: aNumber

	numberOfProcesses := aNumber
	! !!Simulation methodsFor: 'accessing' stamp: 'pre 1/19/2014 20:04'!processes

	^ processes! !!Simulation methodsFor: 'accessing' stamp: 'pre 1/19/2014 20:04'!processes: anObject

	processes := anObject! !!Simulation methodsFor: 'initialize-release' stamp: 'pre 1/19/2014 20:04'!initialize

	self processes: OrderedCollection new.
	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Simulation class
	instanceVariableNames: ''!!Simulation class methodsFor: 'as yet unclassified' stamp: 'pre 1/20/2014 14:08'!benchmark

	^ (1 to: 4) collect: [ :i |
			[ self standardSimulation: (2 raisedTo: i) ] timeToRun ]! !!Simulation class methodsFor: 'as yet unclassified' stamp: 'pre 1/20/2014 14:09'!benchmark2

	^ (1 to: 5) collect: [ :i |
			[ self standardSimulation2: (2 raisedTo: i) ] timeToRun ]! !!Simulation class methodsFor: 'as yet unclassified' stamp: 'pre 1/20/2014 13:59'!standardSimulation2: numberOfProcesses

	^ self new
			numberOfProcesses: numberOfProcesses;
			initialField: (GameOfLifeField gliderFieldRows: 32 columns: 32);
			simulateRounds: 5.
			
			! !!Simulation class methodsFor: 'as yet unclassified' stamp: 'pre 1/20/2014 13:59'!standardSimulation: numberOfProcesses

	^ self new
			numberOfProcesses: numberOfProcesses;
			initialField: (GameOfLifeField gliderFieldRows: 32 columns: 32);
			simulateRounds: 5.
			
			! !----End fileIn of a stream----!!Integer methodsFor: 'benchmarks' stamp: 'toma 1/21/2014 10:55'!gol		STMSimulation benchmark! !!Integer methodsFor: 'benchmarks' stamp: 'toma 1/21/2014 10:56' prior: 33632815!gol		STMSimulation benchmark printString! !----SNAPSHOT----{21 January 2014 . 10:56:17 am} Squeak4.5-12568.image priorSource: 63448!	^STMSimulation benchmark printString!!Integer methodsFor: 'benchmarks' stamp: 'toma 1/21/2014 10:59' prior: 33632930!gol		^STMSimulation benchmark printString! !----QUIT/NOSAVE----{21 January 2014 . 11:00:27 am} Squeak4.5-12568.image priorSource: 78543!----STARTUP----{21 January 2014 . 11:00:33 am} as /home/bot/lang-smalltalk/images/Squeak4.5-12568.image!!Integer methodsFor: 'benchmarks' stamp: 'toma 1/21/2014 11:00' prior: 33632930!gol		^ STMSimulation benchmark printString! !----SNAPSHOT----{21 January 2014 . 11:00:44 am} Squeak4.5-12568.image priorSource: 78543!!Integer methodsFor: 'benchmarks' stamp: 'toma 1/21/2014 11:04'!gol2		^ STMSimulation benchmark2 printString! !Simulation benchmark!----SNAPSHOT----{21 January 2014 . 11:06:45 am} Squeak4.5-12568.image priorSource: 79132!!STMSimulation methodsFor: 'as yet unclassified' stamp: 'toma 1/21/2014 13:05'!print		! !!GameOfLifeField methodsFor: 'accessing' stamp: 'toma 1/21/2014 13:09' prior: 33619796!print

	| resultString |
	resultString := ''.
	(1 to: self height) do: [:y |
		(1 to: self width) do: [ :x |
			resultString := resultString , ((self data at: y at: x) = 1) ifTrue: ['[]'] ifFalse: ['. '].].
		resultString := resultString , Character cr ].
	^ resultString			! !!GameOfLifeField methodsFor: 'accessing' stamp: 'toma 1/21/2014 13:09' prior: 33634066!print

	| resultString |
	resultString := ''.
	(1 to: self height) do: [:y |
		(1 to: self width) do: [ :x |
			resultString := resultString , ((self data at: y at: x) > 0) ifTrue: ['[]'] ifFalse: ['. '].].
		resultString := resultString , Character cr ].
	^ resultString			! !!STMSimulation methodsFor: 'as yet unclassified' stamp: 'toma 1/21/2014 13:11' prior: 33624205!simulateRounds: numberOfRounds
	
	| swapField |

	1 to: numberOfRounds do: [ :roundNumber |
		self simulateRound: roundNumber.
		self processes do: [ :semaphore | semaphore wait. ].
		
		SPyVM print: (self fieldNew print).
		SPyVM print: Character cr.
		
		swapField := self field.
		self field: self fieldNew.
		self fieldNew: swapField.
	].

	^ self field! !----SNAPSHOT----{21 January 2014 . 1:11:46 pm} Squeak4.5-12568.image priorSource: 79361!!GameOfLifeField methodsFor: 'accessing' stamp: 'toma 1/21/2014 13:12' prior: 33634432!print

	| resultString |
	resultString := ''.
	(1 to: self height) do: [:y |
		(1 to: self width) do: [ :x |
			resultString := resultString , (((self data at: y at: x) > 0) ifTrue: ['[]'] ifFalse: ['. ']).].
		resultString := resultString , Character cr ].
	^ resultString			! !----SNAPSHOT----{21 January 2014 . 1:13:04 pm} Squeak4.5-12568.image priorSource: 80734!!STMProcess methodsFor: 'as yet unclassified' stamp: 'toma 1/21/2014 13:32' prior: 33556598!wait		self primWait! !----SNAPSHOT----{21 January 2014 . 1:44:03 pm} Squeak4.5-12568.image priorSource: 81192!!GameOfLifeField class methodsFor: 'as yet unclassified' stamp: 'toma 1/21/2014 13:48' prior: 33620913!gliderFieldRows: numberOfRows columns: numberOfColumns

	| newField |
	newField := self new rows: numberOfRows columns: numberOfColumns.
	
	newField 
		at: 8 at: 5 put: 1;
		at: 9 at: 5 put: 1;	 
		at: 10 at: 5 put: 1;
		at: 10 at: 4 put: 1;
		at: 9 at: 3 put: 1;		at: 13 at: 13 put: 1;
		at: 13 at: 14 put: 1;	 
		at: 13 at: 15 put: 1;
		at: 14 at: 13 put: 1;
		at: 12 at: 14 put: 1.
		
	^ newField! !----SNAPSHOT----{21 January 2014 . 1:48:18 pm} Squeak4.5-12568.image priorSource: 81400!!STMSimulation class methodsFor: 'as yet unclassified' stamp: 'toma 1/21/2014 13:52' prior: 33627087!benchmark

	^ (1 to: 3) collect: [ :i |
			[ self standardSimulation: (2 raisedTo: i) ] timeToRun ]! !!Simulation class methodsFor: 'as yet unclassified' stamp: 'toma 1/21/2014 13:52' prior: 33631876!benchmark

	^ (1 to: 3) collect: [ :i |
			[ self standardSimulation: (2 raisedTo: i) ] timeToRun ]! !!Simulation class methodsFor: 'as yet unclassified' stamp: 'toma 1/21/2014 13:52' prior: 33636825!benchmark

	^ (1 to: 4) collect: [ :i |
			[ self standardSimulation: (2 raisedTo: i) ] timeToRun ]! !!STMSimulation class methodsFor: 'as yet unclassified' stamp: 'toma 1/21/2014 13:52' prior: 33636623!benchmark

	^ (1 to: 4) collect: [ :i |
			[ self standardSimulation: (2 raisedTo: i) ] timeToRun ]! !!STMSimulation class methodsFor: 'as yet unclassified' stamp: 'toma 1/21/2014 13:58' prior: 33627744!standardSimulation: numberOfProcesses
	SPyVM print:'================================================================'.
	^ self new
			numberOfProcesses: numberOfProcesses;
			initialField: (GameOfLifeField gliderFieldRows: 32 columns: 32);
			simulateRounds: 5.
			
			! !----SNAPSHOT----{21 January 2014 . 1:58:07 pm} Squeak4.5-12568.image priorSource: 81998!!STMSimulation class methodsFor: 'as yet unclassified' stamp: 'toma 1/21/2014 13:58'!benchmark3

	^ (1 to: 4) collect: [ :i |
			[ self standardSimulation: (2 raisedTo: i) ] timeToRun ]! !!STMSimulation class methodsFor: 'as yet unclassified' stamp: 'toma 1/21/2014 13:59' prior: 33637887!benchmark3
	| |
	^ (1 to: 4) collect: [ :i | 
			[ self standardSimulation: (2 raisedTo: i) ] timeToRun ]! !!STMSimulation class methodsFor: 'as yet unclassified' stamp: 'toma 1/21/2014 14:00' prior: 33638093!benchmark3
	| field |	field := GameOfLifeField gliderFieldRows: 32 columns: 32.
	^ (1 to: 4) collect: [ :i | 
			[ self standardSimulation: (2 raisedTo: i) ] timeToRun ]! !!STMSimulation class methodsFor: 'as yet unclassified' stamp: 'toma 1/21/2014 14:00' prior: 33638307!benchmark3
	| field |	field := GameOfLifeField gliderFieldRows: 32 columns: 32.
	^ (1 to: 4) collect: [ :i | 
			[ field := self standardSimulation: (2 raisedTo: i) withField: field] timeToRun ]! !STMSimulation class removeSelector: #benchmark3!----SNAPSHOT----{21 January 2014 . 2:00:54 pm} Squeak4.5-12568.image priorSource: 83278!!GameOfLifeField class methodsFor: 'as yet unclassified' stamp: 'toma 1/21/2014 14:04' prior: 33636027!gliderFieldRows: numberOfRows columns: numberOfColumns

	| newField |
	newField := self new rows: numberOfRows columns: numberOfColumns.
	
	newField 
		at: 8 at: 5 put: 1;
		at: 9 at: 5 put: 1;	 
		at: 10 at: 5 put: 1;
		at: 10 at: 4 put: 1;
		at: 9 at: 3 put: 1;		at: 13 at: 13 put: 1;
		at: 13 at: 14 put: 1;	 
		at: 13 at: 15 put: 1;
		at: 14 at: 13 put: 1;
		at: 12 at: 14 put: 1.			numberOfRows > 16 ifTrue: [		newField			at: 20 at: 3 put: 1;			at: 20 at: 4 put: 1;			at: 21 at: 2 put: 1;			at: 21 at: 5 put: 1;			at: 22 at: 3 put: 1;			at: 22 at: 4 put: 1.	].
		
	^ newField! !!GameOfLifeField class methodsFor: 'as yet unclassified' stamp: 'toma 1/21/2014 14:04' prior: 33639032!gliderFieldRows: numberOfRows columns: numberOfColumns

	| newField |
	newField := self new rows: numberOfRows columns: numberOfColumns.
	
	newField 
		at: 8 at: 5 put: 1;
		at: 9 at: 5 put: 1;	 
		at: 10 at: 5 put: 1;
		at: 10 at: 4 put: 1;
		at: 9 at: 3 put: 1;		at: 13 at: 13 put: 1;
		at: 13 at: 14 put: 1;	 
		at: 13 at: 15 put: 1;
		at: 14 at: 13 put: 1;
		at: 12 at: 14 put: 1.			((numberOfRows > 16) and: (numberOfColumns > 16)) ifTrue: [		newField			at: 20 at: 3 put: 1;			at: 20 at: 4 put: 1;			at: 21 at: 2 put: 1;			at: 21 at: 5 put: 1;			at: 22 at: 3 put: 1;			at: 22 at: 4 put: 1.	].
		
	^ newField! !!GameOfLifeField class methodsFor: 'as yet unclassified' stamp: 'toma 1/21/2014 14:05' prior: 33639731!gliderFieldRows: numberOfRows columns: numberOfColumns

	| newField |
	newField := self new rows: numberOfRows columns: numberOfColumns.
	
	newField 
		at: 8 at: 5 put: 1;
		at: 9 at: 5 put: 1;	 
		at: 10 at: 5 put: 1;
		at: 10 at: 4 put: 1;
		at: 9 at: 3 put: 1;		at: 13 at: 13 put: 1;
		at: 13 at: 14 put: 1;	 
		at: 13 at: 15 put: 1;
		at: 14 at: 13 put: 1;
		at: 12 at: 14 put: 1.			((numberOfRows > 16) and: (numberOfColumns > 16)) ifTrue: [		newField			at: 20 at: 3 put: 1;			at: 20 at: 4 put: 1;			at: 21 at: 2 put: 1;			at: 21 at: 5 put: 1;			at: 22 at: 3 put: 1;			at: 22 at: 4 put: 1;						at: 20 at: 20 put: 1;			at: 20 at: 21 put: 1;			at: 20 at: 22 put: 1.			].
		
	^ newField! !----SNAPSHOT----{21 January 2014 . 2:05:40 pm} Squeak4.5-12568.image priorSource: 84405!----STARTUP----{17 May 2014 . 11:47:50 pm} as /home/hub/hpi/stm/src/lang-smalltalk/images/Squeak4.5-12568.image!FileStream stdout nextPutAll: 'release.st'; cr; flush.!----SNAPSHOT----{17 May 2014 . 11:48:30 pm} Squeak4.5-12568.image priorSource: 86737!!Integer methodsFor: '*SPy-Benchmarks' stamp: 'hh 5/17/2014 23:49'!stmBenchmarkTest	FileStream stdout nextPutAll: 'starting stm process.'.	"^ StmProcess new fork"! !----QUIT----{17 May 2014 . 11:49:16 pm} Squeak4.5-12568.image priorSource: 86999!----STARTUP----{17 May 2014 . 11:50:46 pm} as /home/hub/hpi/stm/src/lang-smalltalk/images/Squeak4.5-12568.image!Process subclass: #StmProcess	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-Processes'!!Integer methodsFor: '*SPy-Benchmarks' stamp: 'hh 5/17/2014 23:53' prior: 33641587!stmBenchmarkTest	FileStream stdout nextPutAll: 'starting stm process.'.	^ StmProcess new fork.! !!StmProcess methodsFor: 'nil' stamp: 'hh 5/17/2014 23:54'!fork	<primitive: 787> 	FileStream stdout nextPutAll: 'Primitive stmFork failed'.	self primitiveFailed! !!StmProcess methodsFor: 'as yet unclassified' stamp: 'hh 5/17/2014 23:55' prior: 33642264!fork		<primitive: 787> 		self primitiveFailed! !----SNAPSHOT----{17 May 2014 . 11:55:14 pm} Squeak4.5-12568.image priorSource: 87255!----QUIT----{17 May 2014 . 11:55:30 pm} Squeak4.5-12568.image priorSource: 88078!----STARTUP----{22 May 2014 . 11:48:49 am} as D:\code\python\spy-vm\lang-smalltalk\images\Squeak4.5-12568.image!!StmProcess methodsFor: 'as yet unclassified' stamp: 'pre 5/22/2014 11:49'!wait		<primitive: 789> 		self primitiveFailed! !!Integer methodsFor: '*SPy-Benchmarks' stamp: 'pre 5/22/2014 11:50' prior: 33642105!stmBenchmarkTest	| p |	FileStream stdout nextPutAll: 'starting stm process.'.	p := StmProcess new fork.	p join! !!StmProcess methodsFor: 'as yet unclassified' stamp: 'pre 5/22/2014 11:50'!join		<primitive: 789> 		self primitiveFailed! !StmProcess removeSelector: #wait!----QUIT----{22 May 2014 . 11:50:32 am} Squeak4.5-12568.image priorSource: 88165!----STARTUP----{22 May 2014 . 1:53:40 pm} as D:\code\python\spy-vm\lang-smalltalk\images\Squeak4.5-12568.image!!BlockClosure methodsFor: 'STM' stamp: 'pre 5/22/2014 13:58'!newStmProcess	^ StmProcess forContext: [self value] asContext priority: Processor activePriority! !!BlockClosure methodsFor: 'STM' stamp: 'pre 5/22/2014 13:59' prior: 33568777!parallelFork	^ (self newStmProcess) fork; yourself! !BlockClosure removeSelector: #newStmProcess!!BlockClosure methodsFor: 'STM' stamp: 'pre 5/22/2014 13:59' prior: 33643726!parallelFork	^ (self newSTMProcess) fork; yourself! !!STMProcess methodsFor: 'as yet unclassified' stamp: 'pre 5/22/2014 14:00' prior: 33556280!primWait	<primitive: 789>	SPyVM print: ' Failed to wait for process!! '	self primitiveFailed.! !!STMProcess methodsFor: 'as yet unclassified' stamp: 'pre 5/22/2014 14:00' prior: 33644052!primWait	<primitive: 789>	SPyVM print: ' Failed to wait for process!! '.	self primitiveFailed.! !!STMProcess methodsFor: 'as yet unclassified' stamp: 'pre 5/22/2014 14:00' prior: 42636506!fork	<primitive: 787>	Transcript show: '* STM Process did not fork *' , Character cr.	self primitiveFailed.	self resume! !STMProcess removeSelector: #initialize!Process subclass: #STMProcess	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-STM'!Process subclass: #STMProcess	instanceVariableNames: 'lock'	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-STM'!!Integer methodsFor: '*SPy-Benchmarks' stamp: 'pre 5/22/2014 14:02' prior: 33643008!stmBenchmarkTest	| p |	FileStream stdout nextPutAll: 'starting stm process.'.	p := STMProcess new fork.	p join! !Smalltalk removeClassNamed: #StmProcess!Process subclass: #STMProcess	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-STM'!Process subclass: #STMProcess	instanceVariableNames: 'lock'	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-STM'!!Integer methodsFor: '*SPy-Benchmarks' stamp: 'pre 5/22/2014 14:03' prior: 33644952!stmBenchmarkTest	| p |	FileStream stdout nextPutAll: 'starting stm process.'.	p := [ 1 + 1. ] parallelFork.	p join! !----SNAPSHOT----{22 May 2014 . 2:03:31 pm} Squeak4.5-12568.image priorSource: 88855!----QUIT----{22 May 2014 . 2:06:55 pm} Squeak4.5-12568.image priorSource: 91148!----STARTUP----{22 May 2014 . 2:12:45 pm} as /home/hub/hpi/stm/src/lang-smalltalk/images/Squeak4.5-12568.image!----QUIT----{22 May 2014 . 2:13:22 pm} Squeak4.5-12568.image priorSource: 91234!----STARTUP----{22 May 2014 . 2:41:04 pm} as /home/hub/hpi/stm/src/lang-smalltalk/images/Squeak4.5-12568.image!!Integer methodsFor: '*SPy-Benchmarks' stamp: 'hh 5/22/2014 14:41'!paralellForkTest	| p |	FileStream stdout nextPutAll: 'starting stm process.'.	p := [ 1 + 1. ] parallelFork.	p join! !!Integer methodsFor: '*SPy-Benchmarks' stamp: 'hh 5/22/2014 14:42'!stmTest	| p |	FileStream stdout nextPutAll: 'starting stm process.'.	p := STMProcess new.	p join! !Integer removeSelector: #stmBenchmarkTest!----QUIT----{22 May 2014 . 2:42:38 pm} Squeak4.5-12568.image priorSource: 91430!----STARTUP----{22 May 2014 . 2:45:49 pm} as /home/hub/hpi/stm/src/lang-smalltalk/images/Squeak4.5-12568.image!!Integer methodsFor: '*SPy-Benchmarks' stamp: 'hh 5/22/2014 14:46' prior: 33646317!stmTest	| p |	FileStream stdout nextPutAll: 'starting stm process.'.	p := STMProcess new.	p wait! !!Integer methodsFor: '*SPy-Benchmarks' stamp: 'hh 5/22/2014 14:46' prior: 33646745!stmTest	| p |	FileStream stdout nextPutAll: 'starting stm process.'.	p := STMProcess new.	p wait.! !!Integer methodsFor: '*SPy-Benchmarks' stamp: 'hh 5/22/2014 14:46' prior: 33646127!paralellForkTest	| p |	FileStream stdout nextPutAll: 'starting stm process.'.	p := [ 1 + 1. ] parallelFork.	p wait! !----QUIT----{22 May 2014 . 2:46:59 pm} Squeak4.5-12568.image priorSource: 92032!----STARTUP----{22 May 2014 . 2:47:56 pm} as /home/hub/hpi/stm/src/lang-smalltalk/images/Squeak4.5-12568.image!!Integer methodsFor: '*SPy-Benchmarks' stamp: 'hh 5/22/2014 14:48'!parallelForkTest	| p |	FileStream stdout nextPutAll: 'starting stm process.'.	p := [ 1 + 1. ] parallelFork.	p wait! !Integer removeSelector: #paralellForkTest!----QUIT----{22 May 2014 . 2:48:13 pm} Squeak4.5-12568.image priorSource: 92811!