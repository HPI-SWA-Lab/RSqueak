'From Squeak4.4 of 28 April 2013 [latest update: #12627] on 20 January 2014 at 11:01:35 am'!Object subclass: #STMActor	instanceVariableNames: 'queue handlers active'	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-STM'!!STMActor methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:47'!initialize		self handlers: Dictionary new.	self queue: LinkedList new.! !!STMActor methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 01:01'!loop		self active: true.	[self active] whileTrue: [		self receive ifNotNilDo: [ :m |			(self handlers at: (m messageName))				valueWithArguments: (m arguments)			]	]! !!STMActor methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:32'!onMessage: aSymbol do: aBlock		self handlers at: aSymbol put: aBlock! !!STMActor methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 01:03'!receive		| message | 		message := nil.	[ (self queue isEmpty) ifFalse: [				[message := self queue removeFirst]] 	] atomic value.	^message! !!STMActor methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:56'!schedule: aMessage	[self queue addLast: aMessage] atomic value! !!STMActor methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:58'!send: aSymbol with: anArgument		self schedule: (		STMMessage named: aSymbol withArgs: {anArgument})! !!STMActor methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:58'!send: aSymbol with: anArgument and: anotherArgument		self schedule: (		STMMessage named: aSymbol withArgs: {anArgument. anotherArgument.})! !!STMActor methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 00:58'!send: aSymbol with: anArgument and: anotherArgument and: aThirdArgument		self schedule: (		STMMessage named: aSymbol withArgs: {anArgument. anotherArgument. aThirdArgument})! !!STMActor methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 01:01'!start		[self loop] parallelFork! !!STMActor methodsFor: 'as yet unclassified' stamp: 'toma 1/17/2014 01:04'!stop	self active: false! !!STMActor methodsFor: 'accessing' stamp: 'toma 1/17/2014 00:50'!active	^ active! !!STMActor methodsFor: 'accessing' stamp: 'toma 1/17/2014 00:50'!active: anObject	active := anObject! !!STMActor methodsFor: 'accessing' stamp: 'toma 1/17/2014 00:32'!handlers	^ handlers! !!STMActor methodsFor: 'accessing' stamp: 'toma 1/17/2014 00:32'!handlers: anObject	handlers := anObject! !!STMActor methodsFor: 'accessing' stamp: 'toma 1/17/2014 00:32'!queue	^ queue! !!STMActor methodsFor: 'accessing' stamp: 'toma 1/17/2014 00:56'!queue: anObject		queue := anObject! !